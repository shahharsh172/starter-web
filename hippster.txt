
function Tweet({ data }) {
  return <div className="tweet">{data.text}</div>;
}

function TweetList({ tweets, onLikeChange }) {

  return (
    <div className="tweet-container">
      {tweets.map((t) => (
        <Tweet data={t} />
      ))}
    </div>
    
  );
}

function TweetOperations({ tweetCount }) {
  return <div> {tweetCount} </div>;
}
/*
For user image: https://twitter.com/fraindz/photo

UserDetailSection
- Name, Image, Descrtiption, Location

New Tweet Section
Text Area & button to save the new tweet

Tweets
List of tweets, like option & delete option for each tweets

array.some()
*/

export default function App() {
  const [likedByUser, setLikedByUser] = useState(["t1"]);
  const [tweets, setTweets] = useState([
    { id: "t1", text: "First Tweeet", like: 3 },
    { id: "t2", text: "Second Tweeet", like: 4 }
  ]);
  const removeTweet = (delTweet) =>{
    const reTweets = [...tweets];
    reTweets.splice(delTweet,1);
    setTweets(reTweets);
  }

  const addNewTweet = (newTweet) => {
    setTweets([...tweets, { text: newTweet }]);
  };
  const likeChangeHandler = (tweetId, liked) => {
    const updatedtweet = tweets[tweetId];
    updatedtweet.like = liked === true ? (tweets.like += 1) : "";
    //if liked
    setTweets(function (prev) {
      const updated = [...prev];
      updated[tweetId] = updatedtweet;

      return updated;
    });

    //Add tweetId to likedByUser
    //Update tweet count for the tweet in tweets array
    //else
    //Remove tweetId from likedByUser
    //Decrement tweet count
  };
  return (
    <>
      <UserDetails />
      <TweetList tweets={tweets} onLikeChange={likeChangeHandler} />
      <TweetOperations tweetCount={tweets.length} />
      <PostTweet addTweet={addNewTweet} />
      <RemoveTweet removeTweet={removeTweet} />
    </>
  );
}
